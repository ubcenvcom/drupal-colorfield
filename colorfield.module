<?php
/**
 * @file
 * A simple color field module with a color picker.
 */

/**
 * Implements hook_theme().
 */
function colorfield_theme() {
  return array(
    'colorfield_colored_message' => array(
      'variables' => array(
        'text_color' => 'black', 'text_message' => '',
      ),
      'template' => 'templates/colorfield-colored-message',
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function colorfield_field_info() {
  return array(
    'colorfield' => array(
      'label' => t('Color'),
      'description' => t('A field composed of an RGB color.'),
      'default_widget' => 'colorfield_unified_textfield',
      'default_formatter' => 'colorfield_color_swatch',
      'instance_settings' => array(
        'colorfield_enable_colorpicker' => TRUE,
        'colorfield_colorpicker_type' => 'farbtastic'
      ),
    ),
  );
}

/**
 * Implements hook_field_validate().
 * Validates that the inputed value matchs a hexadecimal color.
 *
 * @see colorfield_field_widget_error()
 */
function colorfield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['rgb'])) {
      if (!preg_match('@^#[0-9a-f]{6}$@i', $item['rgb'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'colorfield_invalid',
          'message' => t('Color must be a hexadecimal value (eg: #84CCAF).'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * Use a regular empty() call to check if the field has any value.
 */
function colorfield_field_is_empty($item, $field) {
  return empty($item['rgb']);
}

/**
 * Implements hook_field_formatter_info().
 */
function colorfield_field_formatter_info() {
  return array(
    // This formatter displays the raw value of the color.
    'colorfield_raw_rgb' => array(
      'label' => t('Raw RGB value'),
      'field types' => array('colorfield'),
      'settings' => array('display_hash' => TRUE),
    ),
    // This formatter displays a DIV of the specified color
    'colorfield_color_swatch' => array(
      'label' => t('Color swatch'),
      'field types' => array('colorfield'),
      'settings' => array('width' => 20, 'height' => 20),
    ),
    // This formatter displays a message colored with the inputed value.
    'colorfield_colored_message' => array(
      'label' => t('Colored message'),
      'field types' => array('colorfield'),
      'settings' => array('message' => t('The color code in this field is @code')),
    ),
  );
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function colorfield_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Expose the message to display as a setting.
  if ($display['type'] == 'colorfield_colored_message') {
    $element['message'] = array(
      '#type' => 'textfield',
      '#title' => t('Message to display'),
      '#default_value' => $settings['message'],
      '#description' => t('Note that you can use @code to display the value of the code in the message.'),
    );
  }
  // Expose the the block width and height.
  else if ($display['type'] == 'colorfield_color_swatch') {
    $element['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width of the block'),
      '#size' => 3,
      '#required' => TRUE,
      '#element_validate' => array('element_validate_number'),
      '#default_value' => $settings['width'],
    );

    $element['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height of the block'),
      '#size' => 3,
      '#required' => TRUE,
      '#element_validate' => array('element_validate_number'),
      '#default_value' => $settings['height'],
    );
  }
  // Let the user decide either or not display the # as a prefix of the value.
  else if ($display['type'] == 'colorfield_raw_rgb') {
    $element['display_hash'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display the # in the output of the color'),
      '#default_value' => $settings['display_hash'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function colorfield_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  // Displays a dynamic message and replace @code by the value of the color
  // code if it exists in the message.
  if ($display['type'] == 'colorfield_colored_message') {
    $summary[] = t('Message displayed: %message', array('%message' => $settings['message']));
    if (strpos($settings['message'], '@code')) {
      $summary[] = '<small>' . t('Note that @code will be replaced by the color picked.') . '</small>';
    }
  }
  // Displays the width & height of the block as summary.
  else if ($display['type'] == 'colorfield_color_swatch') {
    $summary[] = t('Width: @width px', array('@width' => $settings['width']));
    $summary[] = t('Height: @height px', array('@height' => $settings['height']));
  }
  // Displays if the hash is displayed or not.
  else if ($display['type'] == 'colorfield_raw_rgb') {
    $summary[] = ($settings['display_hash']) ? t('The raw will be prefixed with #.') : t('The raw will not be prefixed with #.');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 * Three formatters are implemented:
 * - colorfield_colored_message outputs a configurable message in the color
 *   filled by the user, the user can use @code in the message to display
 *   the value of the color.
 * - colorfield_raw_rgb displays the raw value of the color, can be used
 *   to insert the colors in views for instance.
 * - colorfield_color_swatch displays a swatch of the configured color, the
 *   size of the swatch is configurable.
 *
 * @see colorfield_field_formatter_info()
 */
function colorfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'colorfield_colored_message':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'colorfield_colored_message',
          '#text_color' => $item['rgb'],
          '#text_message' => t($display['settings']['message'], array('@code' => $item['rgb'])),
        );
      }
      break;
    // This formatter simply outputs the raw RGB value prefixed or not with
    // the hash.
    case 'colorfield_raw_rgb':
      foreach ($items as $delta => $item) {
        $color = ($display['settings']['display_hash'])? $item['rgb'] : substr($item['rgb'], 1);
        $element[$delta] = array('#markup' => $color);
      }
      break;
    // Adds an empty DIV, the background of which uses the selected colour.
    // Could be used, for example, to display a swatch of the color.
    case 'colorfield_color_swatch':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array(
            'class' => array('colorfield-color-swatch'),
            'style' => 'width: ' . $display['settings']['width'] . 'px; height: ' . $display['settings']['height'] . 'px; background-color:' . $item['rgb'] . ';'
          ),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Two widgets are provided:
 * - colorfield_unified_textfield lets the user input a color code in
 *   hexadecimal, the user can do it with a selectable color picker
 *   (farbtastic or minicolors for instance).
 * - colorfield_split_textfield exposes three textfields to the user, one for
 *   each color component (red, green and blue).
 */
function colorfield_field_widget_info() {
  return array(
    'colorfield_unified_textfield' => array(
      'label' => t('Color code (eg: #FFAA77)'),
      'field types' => array('colorfield'),
    ),
    'colorfield_split_textfield' => array(
      'label' => t('Split Red, Green and Blue text fields'),
      'field types' => array('colorfield'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function colorfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // @TODO rename rgb as colorfield.
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';
  $widget = $element;

  $widget['#delta'] = $delta;
  // @TODO: review this portion.
  switch ($instance['widget']['type']) {
    case 'colorfield_unified_textfield':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 7,
        '#maxlength' => 7,
      );
      // Add Farbtastic color picker and attach its behavior if the colorpicker
      // is enabled.
      if ($instance['settings']['colorfield_enable_colorpicker']) {
        $widget += array(
          '#suffix' => '<div class="colorfield-picker"></div>',
          '#attributes' => array('class' => array('colorfield-colorpicker')),
          '#attached' => array(
            'library' => array(
              array('system', 'farbtastic')
            ),
            'js' => array(drupal_get_path('module', 'colorfield') . '/js/colorfield-farbtastic.js'),
          ),
        );
      }
      break;

    case 'colorfield_split_textfield':
      // Convert rgb value into r, g, and b for #default_value.
      if (!empty($value)) {
        preg_match_all('@..@', substr($value, 1), $match);
      }
      else {
        $match = array(array());
      }

      // Make this a fieldset with the three text fields.
      $widget += array(
        '#type' => 'fieldset',
        '#element_validate' => array('colorfield_split_textfield_validate'),
        // #delta is set so that the validation function will be able
        // to access external value information which otherwise would be
        // unavailable.
        // @TODO: is the CSS file required?
        '#delta' => $delta,
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'colorfield') . '/styles/colorfield.css'),
        ),
      );

      // Create a textfield for saturation values for Red, Green, and Blue.
      foreach (array('r' => t('Red'), 'g' => t('Green'), 'b' => t('Blue')) as $key => $title) {
        $widget[$key] = array(
          '#type' => 'textfield',
          '#title' => $title,
          '#size' => 2,
          '#default_value' => array_shift($match[0]),
          '#attributes' => array('class' => array('rgb-entry')),
          // '#description' => t('The 2-digit hexadecimal representation of the @color saturation, like "a1" or "ff"', array('@color' => $title)),
        );
      }
      break;

  }
  $element['rgb'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function colorfield_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $instance['settings'];
  if ($widget['type'] == 'colorfield_unified_textfield') {
    $form['colorfield_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Color selection options'),
    );
    $default_value_colorpicker = (isset($widget['settings']['colorfield_options']['colorfield_enable_colorpicker']))? $widget['settings']['colorfield_options']['colorfield_enable_colorpicker'] : $settings['colorfield_enable_colorpicker'];
    $form['colorfield_options']['colorfield_enable_colorpicker'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable the color picker.'),
      '#description' => t('If you enable this option the user will be able to select a color via a user friendly widget.'),
      '#default_value' => $default_value_colorpicker,
    );
    $default_value_colorpicker_type = (isset($widget['settings']['colorfield_options']['colorfield_colorpicker_type'])) ? $widget['settings']['colorfield_options']['colorfield_colorpicker_type'] : $settings['colorfield_colorpicker_type'];
    $form['colorfield_options']['colorfield_colorpicker_type'] = array(
      '#type' => 'select',
      '#title' => t('Select the color picker'),
      '#options' => array(
        'farbtastic' => t('Farbtastic'),
      ),
      '#states' => array(
        'invisible' => array(
          'input[name="instance[widget][settings][colorfield_options][colorfield_enable_colorpicker]"]' => array('checked' => FALSE),
        ),
      ),
      '#description' => t('If you are using jQuery 1.7 or a more recent version (via jQuery update), you will expose the !minicolor_link color picker.', array('!minicolor_link' => l('minicolor', 'https://github.com/claviska/jquery-miniColors'))),
      '#default_value' => $default_value_colorpicker_type,
    );
  }
  return $form;
}


/**
 * Validate the individual fields and then convert them into a single HTML RGB
 * value as text.
 */
function colorfield_split_textfield_validate($element, &$form_state) {
  $delta = $element['#delta']; // TODO: Isn't there a better way to find out which element?
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['rgb'])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta]['rgb'];
    foreach (array('r', 'g', 'b') as $colorfield) {
      $colorfield_value = hexdec($values[$colorfield]);
      // If they left any empty, we'll set the value empty and quit.
      if (strlen($values[$colorfield]) == 0) {
        form_set_value($element, '', $form_state);
        return;
      }
      // If they gave us anything that's not hex, reject it.
      if ((strlen($values[$colorfield]) != 2) || $colorfield_value < 0 || $colorfield_value > 255) {
        form_error($element[$colorfield], t("Saturation value must be a 2-digit hexadecimal value between 00 and ff."));
      }
    }

    $value = sprintf('#%02s%02s%02s', $values['r'], $values['g'], $values['b']);
    form_set_value($element, $value, $form_state);
  }
}
